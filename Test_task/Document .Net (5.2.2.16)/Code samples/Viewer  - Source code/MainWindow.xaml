    <Window
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:local="clr-namespace:Viewer"         
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
    xmlns:System="clr-namespace:System;assembly=mscorlib" 
    mc:Ignorable="d" x:Name="Viewer"  x:Class="Viewer.MainWindow"         
    Title="Document .Net Viewer (SautinSoft Company)" Height="350" Width="700"
    DataContext="{Binding RelativeSource={RelativeSource Self}}"
    WindowState="Maximized"
    Loaded="Viewer_Loaded"  Icon="Icon.ico">
    <Window.Resources>
        <local:BoolToVisibilityConverter x:Key="boolToVisibilityConverter" />
        <Style x:Key="ToolBarBottom" TargetType="{x:Type Button}">
            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
            <Setter Property="Padding" Value="2"/>
            <Setter Property="BorderThickness" Value="1"/>
            <Setter Property="Background" Value="Transparent"/>
            <Setter Property="BorderBrush" Value="Transparent"/>
            <Setter Property="HorizontalAlignment" Value="Center"/>
            <Setter Property="VerticalAlignment" Value="Center"/>
            <Setter Property="HorizontalContentAlignment" Value="Center"/>
            <Setter Property="VerticalContentAlignment" Value="Center"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Button}">
                        <Border x:Name="Bd" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" Padding="{TemplateBinding Padding}" SnapsToDevicePixels="True">
                            <ContentPresenter ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}" ContentStringFormat="{TemplateBinding ContentStringFormat}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsMouseOver" Value="True">
                                <Setter Property="BorderBrush" TargetName="Bd" Value="#90006CD9"/>
                                <Setter Property="Background" TargetName="Bd" Value="#210080FF"/>
                            </Trigger>
                            <Trigger Property="IsKeyboardFocused" Value="True">
                                <Setter Property="BorderBrush" TargetName="Bd" Value="#80DADADA"/>
                                <Setter Property="Background" TargetName="Bd" Value="#210080FF"/>
                            </Trigger>
                            <Trigger Property="IsPressed" Value="True">
                                <Setter Property="BorderBrush" TargetName="Bd" Value="#90006CD9"/>
                                <Setter Property="Background" TargetName="Bd" Value="#400080FF"/>
                            </Trigger>
                            <Trigger Property="IsEnabled" Value="False">
                                <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
    </Window.Resources>

    <Grid>
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto"></RowDefinition>
            <RowDefinition Height="*"></RowDefinition>
            <RowDefinition Height="Auto"></RowDefinition>
        </Grid.RowDefinitions>

        <ToolBar Grid.Row="0" ToolBarTray.IsLocked="True" 
                         KeyboardNavigation.TabNavigation="Continue" 
                         Background="{DynamicResource {x:Static SystemColors.MenuBarBrushKey}}" Style="{DynamicResource Toolbar}" FlowDirection="LeftToRight" HorizontalAlignment="Center">
            <ToolBar.Resources>
                <Style x:Key="Toolbar" TargetType="{x:Type ToolBar}">
                    <Setter Property="SnapsToDevicePixels" Value="true"/>
                    <Setter Property="OverridesDefaultStyle" Value="true"/>
                    <Setter Property="Template">
                        <Setter.Value>
                            <ControlTemplate TargetType="{x:Type ToolBar}">
                                <Border x:Name="Border" CornerRadius="2">
                                    <DockPanel >
                                        <ToggleButton Visibility="Collapsed"  DockPanel.Dock="Right" IsEnabled="False" IsChecked="False" ClickMode="Press">
                                            <Popup x:Name="OverflowPopup" AllowsTransparency="true" Placement="Bottom" IsOpen="{Binding Path=IsOverflowOpen,RelativeSource={RelativeSource TemplatedParent}}" StaysOpen="false" Focusable="false" PopupAnimation="Slide">
                                                <Border x:Name="DropDownBorder" Background="pink" BorderThickness="1" BorderBrush="pink">
                                                    <ToolBarOverflowPanel x:Name="PART_ToolBarOverflowPanel" Margin="2" WrapWidth="200" Focusable="true"  FocusVisualStyle="{x:Null}" KeyboardNavigation.TabNavigation="Cycle" KeyboardNavigation.DirectionalNavigation="Cycle" Visibility="Collapsed"/>
                                                </Border>
                                            </Popup>
                                        </ToggleButton>
                                        <ToolBarPanel x:Name="PART_ToolBarPanel" IsItemsHost="true" Margin="0,1,2,2"/>
                                    </DockPanel>
                                </Border>
                            </ControlTemplate>
                        </Setter.Value>
                    </Setter>
                </Style>
            </ToolBar.Resources>

            <ToggleButton Name="ButtonShowHideFolderTree" 
                          Height="31" Width="31" 
                          ToolTip="Show/Hide Folders Tree" 
                         IsChecked="True">
                <ToggleButton.Style>
                    <Style TargetType="{x:Type ToggleButton}">
                        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
                        <Setter Property="Padding" Value="2"/>
                        <Setter Property="BorderThickness" Value="1"/>
                        <Setter Property="Background" Value="Transparent"/>
                        <Setter Property="BorderBrush" Value="Transparent"/>
                        <Setter Property="HorizontalAlignment" Value="Center"/>
                        <Setter Property="VerticalAlignment" Value="Center"/>
                        <Setter Property="HorizontalContentAlignment" Value="Center"/>
                        <Setter Property="VerticalContentAlignment" Value="Center"/>
                        <Setter Property="Template">
                            <Setter.Value>
                                <ControlTemplate TargetType="{x:Type ToggleButton}">
                                    <Border BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" Padding="{TemplateBinding Padding}" SnapsToDevicePixels="True">
                                        <ContentPresenter ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}" ContentStringFormat="{TemplateBinding ContentStringFormat}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                                    </Border>
                                    <ControlTemplate.Triggers>
                                        <Trigger Property="IsChecked" Value="True">
                                            <Setter Property="BorderBrush" Value="#90006CD9"/>
                                        </Trigger>
                                        <Trigger Property="IsMouseOver" Value="True">
                                            <Setter Property="BorderBrush" Value="#90006CD9"/>
                                            <Setter Property="Background" Value="#210080FF"/>
                                        </Trigger>
                                        <Trigger Property="IsKeyboardFocused" Value="True">
                                            <Setter Property="BorderBrush" Value="#90006CD9"/>
                                            <Setter Property="Background" Value="#210080FF"/>
                                        </Trigger>
                                        <MultiTrigger>
                                            <MultiTrigger.Conditions>
                                                <Condition Property="IsMouseOver" Value="True"/>
                                                <Condition Property="IsChecked" Value="True"/>
                                            </MultiTrigger.Conditions>
                                            <Setter Property="BorderBrush" Value="#90006CD9"/>
                                            <Setter Property="Background" Value="#210080FF"/>
                                        </MultiTrigger>
                                        <MultiTrigger>
                                            <MultiTrigger.Conditions>
                                                <Condition Property="IsKeyboardFocused" Value="True"/>
                                                <Condition Property="IsChecked" Value="True"/>
                                            </MultiTrigger.Conditions>
                                            <Setter Property="BorderBrush" Value="#90006CD9"/>
                                        </MultiTrigger>
                                        <Trigger Property="IsPressed" Value="True">
                                            <Setter Property="BorderBrush" Value="#90006CD9"/>
                                        </Trigger>
                                        <Trigger Property="IsEnabled" Value="False">
                                            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
                                        </Trigger>
                                    </ControlTemplate.Triggers>
                                </ControlTemplate>
                            </Setter.Value>
                        </Setter>
                    </Style>
                </ToggleButton.Style>
                <Image Source="Images/FoldersTree.png" Height="25" Width="25" 
                       Margin="0,0,0,0" VerticalAlignment="Center"/>
            </ToggleButton>
            <Separator />

            <Button Name="ButtonOpenDocument" Height="35" Width="35" 
                            Style="{DynamicResource ToolBarBottom}"
                            ToolTip="Open document..." Click="ButtonOpenDocument_Click">
                <Image Source="Images/Open.png" Height="25" Width="25" 
                        VerticalAlignment="Center"/>
            </Button>

            <Button Name="ButtonSaveDocument"  Height="35" Width="35" 
                            Style="{DynamicResource ToolBarBottom}"
                            Click="ButtonSaveAs_Click" ToolTip="Save document...">
                <Image Source="Images/SaveAs.png" Height="25" Width="25" 
                       VerticalAlignment="Center"/>
            </Button>
            <Separator />

            <Button Name="ButtonPreviousPage" Height="35" Width="35" 
                            Style="{DynamicResource ToolBarBottom}"
                            ToolTip="Previous Page" Click="ButtonPreviousPage_Click" IsEnabled="{Binding CanGoToPreviousPage, ElementName=documentViewer, Mode=OneWay}">
                <Image Source="Images/ArrowUp.png" Height="25" Width="25" 
                                       VerticalAlignment="Center"/>
            </Button>


            <Button Name="ButtonNextPage" Margin="5,0,0,0" Height="35" Width="35" 
                            Style="{DynamicResource ToolBarBottom}"
                            ToolTip="Next Nage" Click="ButtonNextPage_Click" IsEnabled="{Binding CanGoToNextPage, ElementName=documentViewer, Mode=OneWay}">
                <Image Source="Images/ArrowDown.png" Height="25" Width="25" 
                                       VerticalAlignment="Center"/>
            </Button>
            <Separator />

            <Button Name="ButtonZoomIn" ToolTip="Zoom In" 
                            Style="{DynamicResource ToolBarBottom}"  Width="35" Height="35" 
                            IsEnabled="{Binding CanIncreaseZoom, ElementName=documentViewer, Mode=OneWay}"
                            Click="ButtonZoomIn_Click">
                <Image Source="Images/ZoomIn.png" Height="25" Width="25" 
                               VerticalAlignment="Center"/>
            </Button>

            <Button Name="ButtonZoomOut" ToolTip="Zoom Out"
                            Style="{DynamicResource ToolBarBottom}" 
                            Width="35" Height="35" 
                            IsEnabled="{Binding CanDecreaseZoom, ElementName=documentViewer, Mode=OneWay}" Click="ButtonZoomOut_Click">
                <Image Source="Images/ZoomOut.png" Height="25" Width="25"
                               VerticalAlignment="Center"/>
            </Button>

            <Separator />


            <Button Name="ButtonZoom100" ToolTip="Zoom 100%"
                            Style="{DynamicResource ToolBarBottom}" Width="35" Height="35" Click="ButtonZoom100_Click">
                <Image Source="Images/Zoom100.png" Height="25" Width="25" 
                               VerticalAlignment="Center"/>
            </Button>

            <Button Name="ButtonFitToWidth" ToolTip="Fit To Width"
                            Style="{DynamicResource ToolBarBottom}" Width="35" Height="35" Click="ButtonFitToWidth_Click">
                <Image Source="Images/FitToWidth.png" Height="25" Width="25" 
                               VerticalAlignment="Center"/>
            </Button>

            <Button Name="ButtonFitToHeight" ToolTip="Fit To Height"
                            Style="{DynamicResource ToolBarBottom}" Width="35" Height="35" Click="ButtonFitToHeight_Click">
                <Image Source="Images/WholePage.png" Height="25" Width="25" 
                               VerticalAlignment="Center"/>
            </Button>

            <Button Name="ButtonTwoPages" ToolTip="Two Pages"
                            Style="{DynamicResource ToolBarBottom}"  Width="35" Height="35" 
                            HorizontalAlignment="Center" Click="ButtonTwoPages_Click">
                <Image Source="Images/TwoPages.png" Height="25" Width="25" 
                               VerticalAlignment="Center"/>
            </Button>

        </ToolBar>

        <Grid Name="MainGrid"  Grid.Row="1">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="Auto"></ColumnDefinition>
                <ColumnDefinition Width="Auto"></ColumnDefinition>
                <ColumnDefinition Width="*"></ColumnDefinition>
            </Grid.ColumnDefinitions>

            <TreeView Grid.Column="0" x:Name="FoldersTree" Background="{x:Null}" 
                    Foreground="White"
                    Height="Auto"
                    Margin="0"
                    UseLayoutRounding="True" 
                    d:DesignUseLayoutRounding="True"
                    MouseDoubleClick="Folders_MouseDoubleClick" 
                      KeyDown="FoldersTree_KeyDown" IsVisibleChanged="FoldersTree_IsVisibleChanged">
                <TreeView.Resources>
                    <Style x:Key="{x:Type TreeViewItem}" TargetType="{x:Type TreeViewItem}">

                        <Setter Property="HeaderTemplate">
                            <Setter.Value>
                                <DataTemplate>
                                    <StackPanel Orientation="Horizontal" UseLayoutRounding="True"
                                                                    d:DesignUseLayoutRounding="True">
                                        <Image x:Name="img" Height="20" Stretch="Fill" 
                                                                    UseLayoutRounding="True" Width="20" d:DesignUseLayoutRounding="True">
                                            <Image.Source>
                                                <Binding Path="Tag" RelativeSource="{RelativeSource FindAncestor, AncestorLevel=1, AncestorType={x:Type TreeViewItem}}">
                                                    <Binding.Converter>
                                                        <local:HeaderToImageConverter/>
                                                    </Binding.Converter>
                                                </Binding>
                                            </Image.Source>
                                        </Image>
                                        <TextBlock Margin="5,0" Text="{Binding}" UseLayoutRounding="True" d:DesignUseLayoutRounding="True"/>
                                    </StackPanel>
                                </DataTemplate>
                            </Setter.Value>
                        </Setter>

                        <Setter Property="Template">
                            <Setter.Value>
                                <ControlTemplate TargetType="{x:Type TreeViewItem}">
                                    <Grid>
                                        <Grid.ColumnDefinitions>
                                            <ColumnDefinition MinWidth="19" Width="Auto"/>
                                            <ColumnDefinition Width="Auto"/>
                                            <ColumnDefinition Width="*"/>
                                        </Grid.ColumnDefinitions>
                                        <Grid.RowDefinitions>
                                            <RowDefinition Height="Auto"/>
                                            <RowDefinition/>
                                        </Grid.RowDefinitions>
                                        <ToggleButton x:Name="Expander" ClickMode="Press" IsChecked="{Binding IsExpanded, RelativeSource={RelativeSource TemplatedParent}}">
                                            <ToggleButton.Style>
                                                <Style TargetType="{x:Type ToggleButton}">
                                                    <Setter Property="Focusable" Value="False"/>
                                                    <Setter Property="Width" Value="16"/>
                                                    <Setter Property="Height" Value="16"/>
                                                    <Setter Property="Template">
                                                        <Setter.Value>
                                                            <ControlTemplate TargetType="{x:Type ToggleButton}">
                                                                <Border Background="Transparent" Height="16" Padding="5" Width="16">
                                                                    <Path x:Name="ExpandPath" Data="M0,0 L0,6 L6,0 z" Fill="White" Stroke="#FF818181">
                                                                        <Path.RenderTransform>
                                                                            <RotateTransform Angle="135" CenterY="3" CenterX="3"/>
                                                                        </Path.RenderTransform>
                                                                    </Path>
                                                                </Border>
                                                                <ControlTemplate.Triggers>
                                                                    <Trigger Property="IsChecked" Value="True">
                                                                        <Setter Property="RenderTransform" TargetName="ExpandPath">
                                                                            <Setter.Value>
                                                                                <RotateTransform Angle="180" CenterY="3" CenterX="3"/>
                                                                            </Setter.Value>
                                                                        </Setter>
                                                                        <Setter Property="Fill" TargetName="ExpandPath" Value="#FF595959"/>
                                                                        <Setter Property="Stroke" TargetName="ExpandPath" Value="#FF262626"/>
                                                                    </Trigger>
                                                                    <Trigger Property="IsMouseOver" Value="True">
                                                                        <Setter Property="Stroke" TargetName="ExpandPath" Value="#FF27C7F7"/>
                                                                        <Setter Property="Fill" TargetName="ExpandPath" Value="#FFCCEEFB"/>
                                                                    </Trigger>
                                                                    <MultiTrigger>
                                                                        <MultiTrigger.Conditions>
                                                                            <Condition Property="IsMouseOver" Value="True"/>
                                                                            <Condition Property="IsChecked" Value="True"/>
                                                                        </MultiTrigger.Conditions>
                                                                        <Setter Property="Stroke" TargetName="ExpandPath" Value="#FF1CC4F7"/>
                                                                        <Setter Property="Fill" TargetName="ExpandPath" Value="#FF82DFFB"/>
                                                                    </MultiTrigger>
                                                                </ControlTemplate.Triggers>
                                                            </ControlTemplate>
                                                        </Setter.Value>
                                                    </Setter>
                                                </Style>
                                            </ToggleButton.Style>
                                        </ToggleButton>
                                        <Border x:Name="Bd" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" Grid.Column="1" Padding="{TemplateBinding Padding}" SnapsToDevicePixels="True">
                                            <ContentPresenter x:Name="PART_Header" ContentTemplate="{TemplateBinding HeaderTemplate}" Content="{TemplateBinding Header}" ContentStringFormat="{TemplateBinding HeaderStringFormat}" ContentSource="Header" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                                        </Border>
                                        <ItemsPresenter x:Name="ItemsHost" Grid.ColumnSpan="2" Grid.Column="1" Grid.Row="1"/>
                                    </Grid>
                                    <ControlTemplate.Triggers>
                                        <Trigger Property="IsExpanded" Value="False">
                                            <Setter Property="Visibility" TargetName="ItemsHost" Value="Collapsed"/>
                                        </Trigger>
                                        <Trigger Property="HasItems" Value="False">
                                            <Setter Property="Visibility" TargetName="Expander" Value="Hidden"/>
                                        </Trigger>
                                        <Trigger Property="IsSelected" Value="True">
                                            <Setter Property="Background" TargetName="Bd" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"/>
                                            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}"/>
                                        </Trigger>
                                        <MultiTrigger>
                                            <MultiTrigger.Conditions>
                                                <Condition Property="IsSelected" Value="True"/>
                                                <Condition Property="IsSelectionActive" Value="False"/>
                                            </MultiTrigger.Conditions>
                                            <Setter Property="Background" TargetName="Bd" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"/>
                                            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}"/>
                                        </MultiTrigger>
                                        <Trigger Property="IsEnabled" Value="False">
                                            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
                                        </Trigger>
                                    </ControlTemplate.Triggers>
                                </ControlTemplate>
                            </Setter.Value>
                        </Setter>

                    </Style>
                </TreeView.Resources>
                <TreeView.Visibility>
                    <Binding Converter="{StaticResource boolToVisibilityConverter}" ElementName="ButtonShowHideFolderTree" Path="IsChecked"/>
                </TreeView.Visibility>
                <TreeView.BorderBrush>
                    <SolidColorBrush Color="{DynamicResource {x:Static SystemColors.ActiveBorderColorKey}}"/>
                </TreeView.BorderBrush>
                <TreeView.ContextMenu>
                    <ContextMenu UseLayoutRounding="True" d:DesignUseLayoutRounding="True">
                        <MenuItem Header="Open" UseLayoutRounding="True" d:DesignUseLayoutRounding="True" Click="MenuItem_Click_2"/>
                        <MenuItem Header="Open with associated app" UseLayoutRounding="True" d:DesignUseLayoutRounding="True" Click="MenuItem_Click_1"/>
                        <Separator/>
                        <MenuItem Header="Save as..." UseLayoutRounding="True" d:DesignUseLayoutRounding="True" Click="MenuItem_Click_3"/>
                        <Separator/>
                        <MenuItem Header="Update folder" UseLayoutRounding="True" d:DesignUseLayoutRounding="True" Click="MenuItem_Click_4"/>
                    </ContextMenu>
                </TreeView.ContextMenu>
            </TreeView>

            <GridSplitter Name="FolderSplitter" Grid.Column="1" 
                          HorizontalAlignment="Center" 
                          UseLayoutRounding="True" 
                          VerticalAlignment="Stretch" 
                          Width="4" 
                          d:DesignUseLayoutRounding="True" IsVisibleChanged="FolderSplitter_IsVisibleChanged">
                <GridSplitter.Visibility>
                    <Binding Converter="{StaticResource boolToVisibilityConverter}" ElementName="ButtonShowHideFolderTree" Path="IsChecked"/>
                </GridSplitter.Visibility>
                <GridSplitter.Background>
                    <SolidColorBrush Color="{DynamicResource {x:Static SystemColors.ScrollBarColorKey}}"/>
                </GridSplitter.Background>
            </GridSplitter>

            <DocumentViewer Grid.Column="2" x:Name="documentViewer" 
                                VerticalAlignment="Stretch" 
                                HorizontalAlignment="Stretch" BorderThickness="0,1" PageViewsChanged="documentViewer_PageViewsChanged">
                <DocumentViewer.BorderBrush>
                    <SolidColorBrush Color="{DynamicResource {x:Static SystemColors.ActiveBorderColorKey}}"/>
                </DocumentViewer.BorderBrush>
                <DocumentViewer.Template>
                    <ControlTemplate TargetType="{x:Type DocumentViewer}">
                        <Border BorderBrush="{TemplateBinding BorderBrush}" 
                                    BorderThickness="{TemplateBinding BorderThickness}"
                                    Focusable="False" UseLayoutRounding="True" d:DesignUseLayoutRounding="True">
                            <ScrollViewer x:Name="PART_ContentHost" 
                                              Background="#FFE3E3E3"
                                              CanContentScroll="True" 
										        HorizontalScrollBarVisibility="Auto"
										        IsTabStop="False"
										        UseLayoutRounding="True"
										        d:DesignUseLayoutRounding="True">
                            </ScrollViewer>
                        </Border>
                    </ControlTemplate>
                </DocumentViewer.Template>
            </DocumentViewer>

        </Grid>

        <StatusBar Grid.Row="2" MinHeight="30">
            <StatusBarItem Name="LoadedCaption" MinWidth="130"/>
            <Separator></Separator>

            <StatusBarItem Name="RenderedCaption" MinWidth="130"></StatusBarItem>
            <Separator></Separator>

            <StatusBarItem Name="ZoomCaption" MinWidth="40" HorizontalContentAlignment="Center"/>
            <Separator></Separator>

            <StatusBarItem Name="PagesCaption" MinWidth="70" HorizontalContentAlignment="Center" />
            <Separator></Separator>

            <StatusBarItem Name="TrialCaption" HorizontalContentAlignment="Left" >
                <TextBlock >
                    <Run Text="You may easily create the same or similar Viewer using our " 
                         Foreground="Black"/>
                    
                    <Hyperlink Name="OrderLink" NavigateUri="http://www.sautinsoft.com/products/document/order.php" 
                               RequestNavigate="Hyperlink_RequestNavigate"
                               ToolTip="http://www.sautinsoft.com/products/document/order.php">
                        <Run Text="Document .Net." Foreground="#FF358CCB"/>
                    </Hyperlink>
                                        <Run Text=" Need help? " 
                         Foreground="Black"/>
                    <Hyperlink NavigateUri="mailto:support@sautinsoft.com" 
                               RequestNavigate="Hyperlink_RequestNavigate"
                               ToolTip="Contact with our Support Team, we'll help you with any question.">
                        <Run Text="support@sautinsoft.com." Foreground="#FF358CCB"/>
                    </Hyperlink>


                </TextBlock>
            </StatusBarItem>
        </StatusBar>

    </Grid>
</Window>
